generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  username       String       @unique
  name           String
  emailEncrypted String
  emailHash      String       @unique
  phoneEncrypted String?      @unique
  image          String?
  profession     String?
  showPhoneInPDF Boolean      @default(false)
  showEmailInPDF Boolean      @default(false)
  public         Boolean      @default(false)
  template       String?       @default("modern")
  bio            String?
  city           String?
  pickColor      Int?
  skills         String[]
  softSkills     String[]
  courses        Course[]
  experiences    Experience[]
  graduation     Graduation[]
  portfolio      Portfolio[]
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @updatedAt
}

enum PortfolioCategory {
  DESIGN
  DEVELOPMENT
  PHOTOGRAPHY
  MUSIC
  WRITING
  MARKETING
  VIDEO
  ILLUSTRATION
  DATA_SCIENCE
  MARCINEIRO
  ARQUITETO
  CHEF
  ENGENHEIRO
  OUTRA
}

enum PortfolioTag {
  FIGMA
  PHOTOSHOP
  ILLUSTRATOR
  REACT
  NEXTJS
  NODEJS
  PYTHON
  LOGIC_PRO
  PREMIERE
  FINAL_CUT
  WORDPRESS
  CANVA
  SQL
  EXCEL
  FLUTTER
  UNITY
  OUTRA
}

model Portfolio {
  id             Int                @id @default(autoincrement())
  name           String?
  url            String?
  description    String?
  tags           PortfolioTag[]
  customTags     String[] // Aceita valores fora do enum
  category       PortfolioCategory?
  customCategory String? // Aceita categoria personalizada
  userId         Int
  user           User               @relation(fields: [userId], references: [id])
}

model Graduation {
  id          Int      @id @default(autoincrement())
  institution String?
  name        String?
  year        String?
  description String?
  online      Boolean? @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Course {
  id          Int      @id @default(autoincrement())
  institution String?
  name        String?
  year        String?
  description String?
  online      Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Experience {
  id        Int      @id @default(autoincrement())
  company   String?
  start     String?
  end       String?
  jobs      Job[]
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Job {
  id           Int        @id @default(autoincrement())
  function     String?
  description  String?
  start        String?
  end          String?
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id])
}
